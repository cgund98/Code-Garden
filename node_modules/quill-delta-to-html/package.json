{
  "_from": "quill-delta-to-html",
  "_id": "quill-delta-to-html@0.8.4",
  "_inBundle": false,
  "_integrity": "sha1-qYh41unDnaDoazuq0gH21OR/L4U=",
  "_location": "/quill-delta-to-html",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "quill-delta-to-html",
    "fetchSpec": "latest",
    "name": "quill-delta-to-html",
    "raw": "quill-delta-to-html",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/quill-delta-to-html/-/quill-delta-to-html-0.8.4.tgz",
  "_shasum": "a98878d6e9c39da0e86b3baad201f6d4e47f2f85",
  "_shrinkwrap": null,
  "_spec": "quill-delta-to-html",
  "_where": "/home/callum/Coding/code-garden-angular",
  "author": {
    "email": "nihatforweb@gmail.com",
    "name": "Nihat Ã–zer"
  },
  "bugs": {
    "url": "https://github.com/nozer/quill-delta-to-html/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Converts Quill's delta ops to HTML",
  "devDependencies": {
    "@types/mocha": "^2.2.40",
    "@types/node": "^7.0.12",
    "coveralls": "^2.13.0",
    "mocha": "^3.2.0",
    "nyc": "^12.0.2",
    "ts-node": "^3.0.2",
    "typescript": "^2.9.0"
  },
  "homepage": "https://github.com/nozer/quill-delta-to-html#readme",
  "keywords": [
    "delta",
    "html",
    "quill"
  ],
  "license": "ISC",
  "main": "./dist/commonjs/main.js",
  "name": "quill-delta-to-html",
  "nyc": {
    "all": true,
    "exclude": [
      "**/*.d.ts",
      "src/main.ts",
      "typings"
    ],
    "extension": [
      ".ts"
    ],
    "include": [
      "src/**/*.ts"
    ],
    "reporter": [
      "html",
      "json"
    ],
    "require": [
      "ts-node/register"
    ]
  },
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/nozer/quill-delta-to-html.svg?branch=master)](https://travis-ci.org/nozer/quill-delta-to-html) \n[![Coverage Status](https://coveralls.io/repos/github/nozer/quill-delta-to-html/badge.svg?branch=master)](https://coveralls.io/github/nozer/quill-delta-to-html?branch=master)\n\n\n# Quill Delta to HTML Converter #\nConverts [Quill's](https://quilljs.com) [Delta](https://quilljs.com/docs/delta/) format to HTML (insert ops only) with properly nested lists.\n\nYou can try a live demo of the conversion by opening the `demo-browser.html` file after cloning the repo.\n\n\n## Quickstart ## \n\nInstallation\n```\nnpm install quill-delta-to-html\n```\n\nUsage\n```javascript\nvar QuillDeltaToHtmlConverter = require('quill-delta-to-html');\n\nvar deltaOps =  [\n    {insert: \"Hello\\n\"},\n    {insert: \"This is colorful\", attributes: {color: '#f00'}}\n];\n\nvar cfg = {};\n\nvar converter = new QuillDeltaToHtmlConverter(deltaOps, cfg);\n\nvar html = converter.convert(); \n```\n\n## Configuration ## \n\n`QuillDeltaToHtmlConverter` accepts a few configuration options as shown below:\n\n|Option | Default | Description \n|---|---|---|\n|paragraphTag| 'p' | Custom tag to wrap inline html elements|\n|encodeHtml| true | If true, `<, >, /, ', \", &` characters in content will be encoded.|\n|classPrefix| 'ql' | A css class name to prefix class generating styles such as `size`, `font`, etc. |\n|multiLineBlockquote| true | Instead of rendering multiple `blockquote` elements for quotes that are consecutive and have same styles(`align`, `indent`, and `direction`), it renders them into only one|\n|multiLineHeader| true | Same deal as `multiLineBlockquote` for headers|\n|multiLineCodeblock| true | Same deal as `multiLineBlockquote` for code-blocks|\n|linkRel| '' | Specifies a value to put on the `rel` attr on links|\n|linkTarget| '_blank' | Specifies target for all links; use `''` (empty string) to not generate `target` attribute. This can be overridden by an individual link op by specifiying the `target` with a value in the respective op's attributes|\n|allowBackgroundClasses| false | If true, css classes will be added for background attr|\n\n## Rendering Quill Formats ##\n\nYou can customize the rendering of Quill formats by registering to the render events before calling the `convert()` method. \n\nThere are `beforeRender` and `afterRender` events and they are called multiple times before and after rendering each group. A group is one of:\n\n- continuous sets of inline elements\n- a video element\n- list elements\n- block elements (header, code-block, blockquote, align, indent, and direction) \n\n`beforeRender` event is called with raw operation objects for you to generate and return your own html. If you return a `falsy` value, system will return its own generated html. \n\n`afterRender` event is called with generated html for you to inspect, maybe make some changes and return your modified or original html.\n\n```javascript\n\nconverter.beforeRender(function(groupType, data){\n    // ... generate your own html \n    // return your html\n});\nconverter.afterRender(function(groupType, htmlString){\n    // modify if you wish\n    // return the html\n});\n\nhtml = converter.convert();\n\n```\n\nFollowing shows the parameter formats for `beforeRender` event: \n\n\n\n|groupType|data|\n|---|---|\n|`video`|{op: `op object`}|\n|`block`|{op: `op object`: ops: Array<`op object`>}|\n|`list`| {items: Array<{item: `block`, innerList: `list` or `null` }> }|\n|`inline-group`|{ops: Array<`op object`>}|\n\n`op object` will have the following format: \n\n```javascript\n{\n    insert: {\n        type: '' // one of 'text' | 'image' | 'video' | 'formula',\n        value: '' // some string value  \n    }, \n    attributes: {\n        // ... quill delta attributes \n    }\n}\n```\n\n## Rendering Custom Blot Formats ##\n\nYou need to tell system how to render your custom blot by registering a renderer callback function to `renderCustomWith` method before calling the `convert()` method. \n\nExample:\n```javascript \nlet ops = [\n    {insert: {'my-blot': {id: 2, text: 'xyz'}}}\n];\n\nlet converter = new QuillDeltaToHtmlConverter(ops);\n\n// customOp is your custom blot op\n// contextOp is the block op that wraps this op, if any. \n// If, for example, your custom blot is located inside a list item,\n// then contextOp would provide that op. \nconverter.renderCustomWith(function(customOp, contextOp){\n    if (customOp.insert.type === 'my-blot') {\n        let val = customOp.insert.value;\n        return `<span id=\"${val.id}\">${val.text}</span>`;\n    } else {\n        return 'Unmanaged custom blot!';\n    }\n});\n\nhtml = converter.convert();\n```\n`customOp object` will have the following format: \n\n```javascript\n{\n    insert: {\n        type: string //whatever you specified as key for insert, in above example: 'my-blot'\n        value: any // value for the custom blot  \n    }, \n    attributes: {\n        // ... any attributes custom blot may have\n    }\n}\n```\n\n## Advanced Custom Rendering Using Grouped Ops ##\n\nIf you want to do the full rendering yourself, you can do so \nby getting the processed & grouped ops.\n\n```javascript\nlet groupedOps = converter.getGroupedOps();\n```\nEach element in groupedOps array will be an instance of the \nfollowing types: \n\n|type|properties|\n|---|---|\n|`InlineGroup`|ops: Array<`op object`>|\n|`VideoItem`|op: `op object`|\n|`BlockGroup`|op: `op object`, ops: Array<`op object`>|\n|`ListGroup`|items: Array<`ListItem`>|\n||ListItem: {item:`BlockGroup`, innerList:`ListGroup`}|\n\nSee above for `op object` format. \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/nozer/quill-delta-to-html.git"
  },
  "scripts": {
    "browser": "npm run browserbundle && echo '; window.QuillDeltaToHtmlConverter = window.QuillDeltaToHtmlConverter.QuillDeltaToHtmlConverter; ' >>  ./dist/browser/QuillDeltaToHtmlConverter.bundle.js ",
    "browserbundle": "browserify ./dist/commonjs/QuillDeltaToHtmlConverter.js -o ./dist/browser/QuillDeltaToHtmlConverter.bundle.js -s QuillDeltaToHtmlConverter ",
    "coverage": "./node_modules/nyc/bin/nyc.js report --reporter=text-lcov | coveralls ",
    "coveragehtml": "./node_modules/nyc/bin/nyc.js report --reporter=html ",
    "test": "./node_modules/nyc/bin/nyc.js ./node_modules/mocha/bin/mocha --compilers ts:ts-node/register -b \"./test/**/*.ts\"  ",
    "watch": "tsc --watch "
  },
  "types": "./dist/commonjs/main.d.ts",
  "version": "0.8.4"
}
